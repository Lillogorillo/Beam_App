// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relazioni
  tasks        Task[]
  categories   Category[]
  timeSessions TimeSession[]
  goals        Goal[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  color       String   @default("#3B82F6")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relazioni
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("categories")
}

model Task {
  id            String   @id @default(cuid())
  title         String
  description   String?
  priority      Priority @default(MEDIUM)
  status        Status   @default(PENDING)
  dueDate       DateTime?
  estimatedTime Int?     // in minuti
  completedAt   DateTime?
  userId        String
  categoryId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relazioni
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     Category?      @relation(fields: [categoryId], references: [id])
  subtasks     Subtask[]
  timeSessions TimeSession[]

  @@map("tasks")
}

model Subtask {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relazioni
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model TimeSession {
  id          String      @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  duration    Int?        // in minuti
  sessionType SessionType
  taskId      String?
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relazioni
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id])

  @@map("time_sessions")
}

model Goal {
  id          String   @id @default(cuid())
  title       String
  description String?
  target      Int      // obiettivo numerico
  current     Int      @default(0)
  unit        String   // es: "tasks", "hours", "days"
  deadline    DateTime?
  completed   Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relazioni
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SessionType {
  WORK
  SHORT_BREAK
  LONG_BREAK
}
